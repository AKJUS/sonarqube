<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">
<mapper namespace="org.sonar.db.sca.ScaDependenciesMapper">
  <!-- we're using a resultMap instead of the usual resultType approach in order to provide
       a typeHandler for the chains column -->
  <resultMap id="scaDependencyResultMap" type="org.sonar.db.sca.ScaDependencyDto">
    <constructor>
      <idArg column="uuid" javaType="String"/>
      <arg column="sca_release_uuid" javaType="String"/>
      <!-- the underscore prefix means to use the primitive type instead of boxed type -->
      <arg column="direct" javaType="_boolean"/>
      <arg column="scope" javaType="String"/>
      <arg column="production_scope" javaType="_boolean"/>
      <arg column="user_dependency_file_path" javaType="String"/>
      <arg column="lockfile_dependency_file_path" javaType="String"/>
      <arg column="chains" typeHandler="org.sonar.db.sca.ListOfListOfStringsTypeHandler" jdbcType="CLOB"
           javaType="java.util.List"/>
      <arg column="new_in_pull_request" javaType="_boolean"/>
      <arg column="created_at" javaType="_long"/>
      <arg column="updated_at" javaType="_long"/>
    </constructor>
  </resultMap>

  <sql id="scaDependenciesColumns">
    sd.uuid,
    sd.sca_release_uuid,
    sd.direct,
    sd.scope,
    sd.production_scope,
    sd.user_dependency_file_path,
    sd.lockfile_dependency_file_path,
    sd.chains,
    sd.new_in_pull_request,
    sd.created_at,
    sd.updated_at
  </sql>

  <insert id="insert" parameterType="org.sonar.db.sca.ScaDependencyDto" useGeneratedKeys="false">
    insert into sca_dependencies (
      uuid,
      sca_release_uuid,
      direct,
      scope,
      production_scope,
      user_dependency_file_path,
      lockfile_dependency_file_path,
      chains,
      new_in_pull_request,
      created_at,
      updated_at
    ) values (
      #{uuid,jdbcType=VARCHAR},
      #{scaReleaseUuid,jdbcType=VARCHAR},
      #{direct,jdbcType=BOOLEAN},
      #{scope,jdbcType=VARCHAR},
      #{productionScope,jdbcType=BOOLEAN},
      #{userDependencyFilePath,jdbcType=VARCHAR},
      #{lockfileDependencyFilePath,jdbcType=VARCHAR},
      #{chains,jdbcType=CLOB,typeHandler=org.sonar.db.sca.ListOfListOfStringsTypeHandler},
      #{newInPullRequest,jdbcType=BOOLEAN},
      #{createdAt,jdbcType=BIGINT},
      #{updatedAt,jdbcType=BIGINT}
    )
  </insert>

  <delete id="deleteByUuid" parameterType="string">
    delete from sca_dependencies
    where uuid = #{uuid,jdbcType=VARCHAR}
  </delete>

  <select id="selectByUuid" parameterType="string" resultMap="scaDependencyResultMap">
    select <include refid="scaDependenciesColumns"/>
    from sca_dependencies sd
    where sd.uuid = #{uuid,jdbcType=VARCHAR}
  </select>

  <select id="selectByReleaseUuids" parameterType="string" resultMap="scaDependencyResultMap">
    select <include refid="scaDependenciesColumns"/>
    from sca_dependencies sd
    <if test="arg0.isEmpty()">
      where 1=0
    </if>
    <if test="!arg0.isEmpty()">
      where sd.sca_release_uuid in
      <foreach collection="collection" item="sca_release_uuid" open="(" close=")" separator=",">
        #{sca_release_uuid, jdbcType=VARCHAR}
      </foreach>
    </if>
  </select>

  <select id="selectByBranchUuid" parameterType="string" resultMap="scaDependencyResultMap">
    select <include refid="scaDependenciesColumns"/>
    from sca_dependencies sd
    inner join sca_releases sr on sd.sca_release_uuid = sr.uuid
    where sr.component_uuid = #{branchUuid,jdbcType=VARCHAR}
  </select>

  <select id="selectByQuery" parameterType="map" resultMap="scaDependencyResultMap">
    select <include refid="scaDependenciesColumns"/>
    <include refid="sqlSelectByQuery"/>
    ORDER BY sd.uuid ASC
    <include refid="org.sonar.db.common.Common.pagination"/>
  </select>

  <select id="countByQuery" resultType="int">
    select count(sd.uuid)
    <include refid="sqlSelectByQuery"/>
  </select>

  <sql id="sqlSelectByQuery">
    from sca_dependencies sd
    inner join sca_releases sr on sd.sca_release_uuid = sr.uuid
    where sr.component_uuid = #{query.branchUuid,jdbcType=VARCHAR}
    <if test="query.direct != null">
      AND sd.direct = #{query.direct,jdbcType=BOOLEAN}
    </if>
    <if test="query.packageManagers != null and !query.packageManagers.isEmpty()">
      AND sr.package_manager IN
      <foreach collection="query.packageManagers" open="(" close=")" item="packageManager" separator=",">
        #{packageManager,jdbcType=VARCHAR}
      </foreach>
    </if>
    <if test="query.query() != null">
      AND lower(sr.package_name) LIKE #{query.likeQuery} ESCAPE '/'
    </if>
  </sql>

  <update id="update" parameterType="org.sonar.db.sca.ScaDependencyDto" useGeneratedKeys="false">
    update sca_dependencies
    set
      uuid = #{uuid, jdbcType=VARCHAR},
      sca_release_uuid = #{scaReleaseUuid, jdbcType=VARCHAR},
      direct = #{direct, jdbcType=BOOLEAN},
      scope = #{scope, jdbcType=VARCHAR},
      production_scope = #{productionScope, jdbcType=BOOLEAN},
      user_dependency_file_path = #{userDependencyFilePath, jdbcType=VARCHAR},
      lockfile_dependency_file_path = #{lockfileDependencyFilePath, jdbcType=VARCHAR},
      chains = #{chains, jdbcType=CLOB, typeHandler=org.sonar.db.sca.ListOfListOfStringsTypeHandler},
      new_in_pull_request = #{newInPullRequest, jdbcType=BOOLEAN},
      updated_at = #{updatedAt, jdbcType=BIGINT}
    where
      uuid = #{uuid, jdbcType=VARCHAR}
  </update>

</mapper>
